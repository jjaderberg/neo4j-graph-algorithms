import org.asciidoctor.Asciidoctor
import org.asciidoctor.OptionsBuilder
import org.asciidoctor.SafeMode

buildscript {
    ext {
        asciidoctorjVersion = '1.5.4.1'
        asciidoctorjPdfVersion = '1.5.0-alpha.11'
        asciidoctorGroovyDslVersion = '1.0.0.Alpha2'
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.asciidoctor:asciidoctorj:$asciidoctorjVersion"
        classpath "org.asciidoctor:asciidoctorj-pdf:$asciidoctorjPdfVersion"
        classpath "org.asciidoctor:asciidoctorj-groovy-dsl:$asciidoctorGroovyDslVersion"
        classpath 'net.sf.docbook:docbook-xsl:1.79.1:ns-resources@zip'
        classpath fileTree(dir: "${rootProject.projectDir}/lib", include: '*.jar')
        classpath files("docbook/catalog/")
    }
}

plugins {
    id 'base'
    id 'org.neo4j.doc.build.vale' version '1.0-alpha01'
    id 'org.neo4j.doc.build.saxon' version '1.0-alpha01'
    id 'org.neo4j.doc.build.docbook' version '1.0-alpha01'
}

def traceDocbook = hasProperty('traceDocbook') ? true : false

if (!project.hasProperty("graphAlgoVersion")) { ext.graphAlgoVersion = "3.1.5.1" }
if (!project.hasProperty("neo4jVersion")) { ext.neo4jVersion = "3.1.7" }
if (!project.hasProperty("ogmDocVersion")) { ext.ogmDocVersion = "3.0" }
ext {
    traceDocbook = traceDocbook
    resourcesDir = "${projectDir}"

    graphAlgoDocVersion = graphAlgoVersion.tokenize('.')[0..1].join(".")
    if (graphAlgoVersion.contains("-")) {graphAlgoVersion += "-preview"}

    neo4jVersionParts = neo4jVersion.split('-')
    neo4jDocVersion = neo4jVersionParts[0][0..2]
    if (1 < neo4jVersionParts.size()) {
        neo4jDocVersion += "-preview"
    }

    copyrightYear = '2017'
    docsBaseUri = "https://neo4j.com/docs"
    docsCrossReferenceBaseUris = [
            'operations-manual-base-uri' : "${docsBaseUri}/operations-manual/${neo4jDocVersion}",
            'developer-manual-base-uri'  : "${docsBaseUri}/developer-manual/${neo4jDocVersion}",
            'java-reference-base-uri'    : "${docsBaseUri}/java-reference/${neo4jDocVersion}",
            'rest-docs-base-uri'         : "${docsBaseUri}/rest-docs/${neo4jDocVersion}",
            'ogm-manual-base-uri'        : "${docsBaseUri}/ogm-manual/${ogmDocVersion}",
    ]
    commonAsciidoctorAttributes = [
            'copyright-year'                   : copyrightYear,
            'copyright'                        : "${copyrightYear} Neo4j, Inc.",
            'common-license-page-uri'          : "${docsBaseUri}/license/",
            'neo4j-version'                    : neo4jDocVersion,
            'neo4j-version-exact'              : neo4jVersion,
            'graph-algo-doc-version'           : graphAlgoDocVersion,
            'neo4j-git-version'                : neo4jDocVersion,
            'doctype'                          : 'book',
            'icons'                            : 'font',
            'imagesdir'                        : './images',
            'attribute-missing'                : 'warn',
    ] + docsCrossReferenceBaseUris
    pdfAsciidoctorAttributes = [
            'source-highlighter': 'rouge',
            'pdf-style'         : 'neo',
            'pdf-fontsdir'      : "$projectDir/common/fonts".toString(),
            'doctype'           : 'book',
            'toc'               : '',
            'showlinks'         : '',
            'nonhtmloutput'     : '',
    ]

    docId = 'graph-algo-manual'
    olinkdb = "${buildDir}/olinkdb/olinkdb.xml"

    runCommand = { strList ->
        assert ( strList instanceof String ||
            ( strList instanceof List && strList.each{ it instanceof String } ) \
    )
        def proc = strList.execute()
        // proc.in.eachLine { line -> println line }
        proc.out.close()
        proc.waitFor()
        // print "[INFO] ( "
        // if(strList instanceof List) {
        //     strList.each { print "${it} " }
        // } else {
        //     print strList
        // }
        // println " )"
        if (proc.exitValue()) {
            println "gave the following error: "
            println "[ERROR] ${proc.getErrorStream()}"
        }
        assert !proc.exitValue()
    }
}

def getAsciidoctor() {
    project.ext.adoc = Asciidoctor.Factory.create()
    project.ext.adoc
}

task toDocbook {
    description 'Build Neo4j Graph Algorithms Manual Docbook output.'
    ext.sourceDir = "${projectDir}/asciidoc"
    def sourceFile = new File("${sourceDir}/index.adoc")
    def imagesDir = '../images'
    def docbookOutputDir = "${buildDir}/docbook/${graphAlgoDocVersion}"
    def templateDir = "${projectDir}/templates/docbook"
    inputs.dir sourceDir
    outputs.dir docbookOutputDir
    doLast {
        def attrs = project.ext.commonAsciidoctorAttributes + [
            'version'             : graphAlgoDocVersion,
            'docinfo1'            : '',
        ]
        attrs['imagesdir'] = imagesDir
        attrs['stylesheet'] = 'github.css'
        attrs['stylesdir'] = '../css'
        attrs['linkcss'] = ''
        def opts = OptionsBuilder.options()
                .backend('docbook5')
                .safe(SafeMode.UNSAFE)
                .toDir(new File(docbookOutputDir))
                .templateDir(new File(templateDir))
                .mkDirs(true)
                .attributes(attrs)
        def asciidoctor = getAsciidoctor()
        asciidoctor.convertFile(sourceFile, opts.get())
    }
    // finalizedBy {toDocbookCopyResources}
    // finalizedBy {preprocess}
}

html {
    description 'Build Neo4j Graph Algorithms Manual to multi-page HTML.'
    dependsOn toDocbook
    doFirst { println "[+] Building Neo4j Graph Algorithms Manual multi-page HTML" }
    def docbookInputDir = "${buildDir}/docbook/${graphAlgoDocVersion}"
    def sourceFile = "${docbookInputDir}/index.xml"
    def outputDir = "${buildDir}/html/${graphAlgoDocVersion}"
    def toolsDir = "${rootProject.projectDir}/docbook"
    def css = [
        '//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css',
        '//cdnjs.cloudflare.com/ajax/libs/font-awesome/4.1.0/css/font-awesome.min.css',
        '//fonts.googleapis.com/css?family=Open+Sans:400,300,400italic,600,300italic',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/codemirror.min.css',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/theme/neo.min.css',
        'css/extra.css',
        'css/chunked-base.css'
    ].join(" ")
    def scripts = [
        '//ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js',
        '//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/codemirror.min.js',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/addon/runmode/runmode.min.js',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/mode/javascript/javascript.min.js',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/mode/shell/shell.min.js',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/mode/python/python.min.js',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/mode/xml/xml.min.js',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/mode/clike/clike.min.js',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/mode/cypher/cypher.min.js',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/mode/properties/properties.min.js',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/mode/groovy/groovy.min.js',
        'javascript/colorize.js',
        'javascript/tabs-for-chunked.js',
        'javascript/mutate.min.js',
        'javascript/jquery/treeview/jquery.treeview.min.js',
        'javascript/mp-nav.js',
        'javascript/versionswitcher.js',
        'javascript/version.js',
    ].join(" ")

    // Task configuration
    inputs.dir docbookInputDir
    outputs.dir outputDir

    stylesheet "classpath:xsl/custom/xhtml5/chunk.xsl"
    input sourceFile

    // Stylesheet parameters
    parameters ([
            "base.dir": "${outputDir}",
            "chunk.section.depth": "0",
            "html.ext": ".html",
            "make.clean.html": "1",
            "chunker.output.method": "html",
            "chunker.output.encoding": "UTF-8",
            "chunker.output.indent": "yes",
            "use.id.as.dirname": "1",
            "html.stylesheet": "${css}",
            "html.script": "${scripts}",
            "neo.search": "1",
            "generate.toc": "''",
            "header.rule": "0",
            "neo.documentation.library.links":
            """
            Operations_Manual=${docsCrossReferenceBaseUris['operations-manual-base-uri']}/
            Developer_Manual=${docsCrossReferenceBaseUris['developer-manual-base-uri']}/
            OGM_Manual=${docsCrossReferenceBaseUris['ogm-manual-base-uri']}/
            Java_Reference=${docsCrossReferenceBaseUris['java-reference-base-uri']}/
            REST_Docs=${docsCrossReferenceBaseUris['rest-docs-base-uri']}/
            """,
            "target.database.document": "file://${olinkdb}",
            "current.docid": "$docId"
    ])
    finalizedBy { copyHtmlResources }
}

task copyHtmlResources(type: Copy) {
    description 'Copy resources for the multi-page Neo4j Graph Algorithms Manual'
    inputs.dir "${resourcesDir}/css"
    inputs.dir "${resourcesDir}/javascript"
    inputs.dir "${resourcesDir}/images"
    from ("${toDocbook.sourceDir}") {
        include 'images/**'
    }
    from ("${resourcesDir}") {
        include 'css/chunked-base.css'
        include 'css/extra.css'
        include 'javascript/colorize.js'
        include 'javascript/mp-nav.js'
        include 'javascript/versionswitcher.js'
        include 'javascript/version.js'
        include 'images/**'
    }
    into "${buildDir}/html/${graphAlgoDocVersion}"
}

task packageHtml(type: Tar, dependsOn: html) {
    baseName "graph-algorithms-manual"
    version graphAlgoDocVersion
    extension 'tar.gz'
    compression Compression.GZIP
    from {
        "${buildDir}/html/${graphAlgoDocVersion}"
    }
    into {
        "${baseName}/${graphAlgoDocVersion}"
    }
    destinationDir file("$rootProject.buildDir/distributions")
}
// vim: set fdm=expr:
